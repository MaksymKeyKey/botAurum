import base64
import json
import hashlib
import requests
import telebot
import time
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import threading
from pymongo import MongoClient
import schedule
from datetime import datetime, timedelta

from apscheduler.schedulers.background import BackgroundScheduler


API_TOKEN = '7225697817:AAFp-RI5wi8twCzp1AOY4zSJbUr7Xzhehgc'
LIQPAY_PUBLIC_KEY = 'sandbox_i38312250017'  # Test public key
LIQPAY_PRIVATE_KEY = 'sandbox_FRDaasO0MmnhPbbp9U3d8DylKxr6ah8ppwkWKCcY'  # Test private key

bot = telebot.TeleBot(API_TOKEN)

# MongoDB connection
client = MongoClient('mongodb+srv://seksikoleg5:se4HivNRYKdydnzc@cluster0.pdc2rrh.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', 
                     tls=True, tlsAllowInvalidCertificates=True)
db = client['botUsers']
users_collection = db['users']
news_collection = db['news']
members_collection = db['members']
monthes_collection = db['monthes']
seminars_collection = db['seminars']

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
admins = [635258639]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class States:
    WELCOME = "WELCOME"
    CHOOSING_OPTION = "CHOOSING_OPTION"
    CHOOSING_DIRECTION = "CHOOSING_DIRECTION"
    CHOOSING_MEMBERS = "CHOOSING_MEMBERS"
    CHOOSING_FORMAT = "CHOOSING_FORMAT"
    LEAVE_CONTACT = "LEAVE_CONTACT"
    PAYMENT = "PAYMENT"
    ENTERING_NEWS = "ENTERING_NEWS"

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
WAITING_TIME = 3600*24  # 24 —á–∞—Å–∞
user_states = {}
user_contacts = {}
user_directions = {}
user_formats = {}
user_order_ids = {}
last_interaction_times = {}
current_news_index = {}
last_message_id = {}
user_last_interaction = {}

def split_text(text, max_length=1024):
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders():
    while True:
        current_time = time.time()
        for chat_id, last_time in last_interaction_times.items():
            if current_time - last_time > WAITING_TIME:
                bot.send_message(chat_id, "–í—ã –µ—â–µ –∑–¥–µ—Å—å? –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
                last_interaction_times[chat_id] = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
def update_last_interaction(chat_id):
    last_interaction_times[chat_id] = time.time()
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ MongoDB
    users_collection.update_one(
        {'user_id': chat_id},
        {'$set': {'last_interaction': time.time()}},
        upsert=True
    )

##############################################################################################################

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = States.WELCOME
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø —á–∞—Ç-–±–æ—Ç —ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç –ê–∫–∞–¥–µ–º—ñ—ó Aurum üòä\n\n"
                                  "–ú–µ–Ω–µ –∑–≤—É—Ç—å Aurum bot ü§ñ\n"
                                  "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –¥–ª—è —Ç–µ–±–µ üôÇ\n"
                                  "‚ú® –î–æ–≤—ñ–¥–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—É –ê–∫–∞–¥–µ–º—ñ—é\n"
                                  "üìö –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —ñ –≤–∏–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç—Ä–µ–Ω—ñ–Ω–≥\n"
                                  "üì∞ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–≤—ñ–∂—ñ –∫—Ä—É—Ç—ñ –Ω–æ–≤–∏–Ω–∏\n"
                                  "üì± –°—Ç–µ–∂–∏—Ç–∏ –∑–∞ –Ω–∞–º–∏ –≤ —Å–æ—Ü –º–µ—Ä–µ–∂–∞—Ö\n"
                                  "üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥ —ñ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫—É—Ä—Å üí≥")
    first_question(message.chat.id)
    update_last_interaction(message.chat.id)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB —Å –ø–æ–ª–µ–º payment_status
    users_collection.update_one(
        {'user_id': message.chat.id},
        {'$set': {
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name,
            'last_interaction': time.time(),
            'state': States.WELCOME,
            'arrival_date': datetime.now()  
        }},
        upsert=True
    )
    
@bot.callback_query_handler(func=lambda call: call.data in ["want_to_be_rehabilitologist", "want_to_upgrade_qualification", "want_to_participate_in_events"])
def handle_first_question_response(call):
    chat_id = call.message.chat.id
    response = call.data

    # –ó–∞–ø–∏—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ MongoDB
    users_collection.update_one(
        {"user_id": chat_id},
        {"$set": {"first_question": response}},
        upsert=True
    )
    second_question(chat_id)

@bot.callback_query_handler(func=lambda call: call.data in ["offline", "online"])
def handle_second_question_response(call):
    chat_id = call.message.chat.id
    response = call.data

    # –ó–∞–ø–∏—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ MongoDB
    users_collection.update_one(
        {"user_id": chat_id},
        {"$set": {"second_question": response}},
        upsert=True
    )

    third_question(chat_id)

@bot.message_handler(func=lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    send_main_menu(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤–∏–Ω–∏")
def handle_news_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    news_menu(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ù–∞–≤—á–∞–Ω–Ω—è")
def handle_learning_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    learn_plan_menu(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ –Ω–∞—Å")
def handle_about_us_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    aboutUs_menu(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
def handle_contacts_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    our_contacts(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –Ω–∞—Å")
def handle_detail_about_us_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    detail_aboutUs(chat_id)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ –Ω–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è")
def handle_about_learning_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    about_learning(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ó–∞—Å–Ω–æ–≤–Ω–∏–∫–∏")
def handle_founders_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    about_founders(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ß–æ–º—É –º–∏?")
def handle_why_we_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    why_we(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "üí™–°–ø—ñ–∫–µ—Ä–∏")
def handle_speakers_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    members_menu(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é")
def handle_back_to_menu_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    send_main_menu(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ú–æ–¥—É–ª—å 1")
def handle_module_1_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    first_module(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ú–æ–¥—É–ª—å 2")
def handle_module_2_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    second_module(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ú–æ–¥—É–ª—å 3")
def handle_module_3_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    third_module(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å")
def handle_all_course_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    all_course(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∑–∞—Ö–æ–¥–∏")
def handle_actual_events_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    actual_events(chat_id)
    
@bot.message_handler(func=lambda message: message.text == "–ö–æ–ª–∏?")
def handle_seminars_when_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    seminars_data(chat_id, get_seminars_element, 'when')

@bot.message_handler(func=lambda message: message.text == "–î–µ?")
def handle_seminars_where_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    seminars_data(chat_id, get_seminars_element, 'where')

@bot.message_handler(func=lambda message: message.text == "–í–∞—Ä—Ç—ñ—Å—Ç—å")
def handle_seminars_cost_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    seminars_data(chat_id, get_seminars_element, 'cost')

@bot.message_handler(func=lambda message: message.text == "–ü–ª–∞–Ω –∫–æ–Ω–≥—Ä–µ—Å—É")
def handle_seminars_plan_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    seminars_data(chat_id, get_seminars_element, 'plan')
    
@bot.message_handler(func=lambda message: message.text == "–†–æ–∑–∫–ª–∞–¥ —Å–µ–º—ñ–Ω–∞—Ä—ñ–≤")
def handle_schedule_seminars_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    schelude_seminars(chat_id) 
    
@bot.message_handler(func=lambda message: message.text == select_month('month_1'))
def handle_schedule_month_1_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    schelude_list(chat_id, 'month_1') 
    
@bot.message_handler(func=lambda message: message.text == select_month('month_2'))
def handle_schedule_month_2_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    schelude_list(chat_id, 'month_2') 

@bot.message_handler(func=lambda message: message.text == select_month('month_3'))
def handle_schedule_month_3_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    schelude_list(chat_id, 'month_3')
    
@bot.message_handler(func=lambda message: message.text == select_month('month_4'))
def handle_schedule_month_4_request(message):
    chat_id = message.chat.id
    user_last_interaction[chat_id] = datetime.now()
    schelude_list(chat_id, 'month_4')

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact is not None:
        user_contacts[message.chat.id] = message.contact.phone_number
        bot.send_message(message.chat.id, "–î—è–∫—É—é! –ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂—É—Ç—å—Å—è –∑ –í–∞–º–∏.")
        user_states[message.chat.id] = States.PAYMENT
        users_collection.update_one(
            {'user_id': message.chat.id},
            {'$set': {'contact': message.contact.phone_number}},
            upsert=True
        )
        #create_liqpay_invoice(message)
        update_last_interaction(message.chat.id)

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    handle_successful_payment(message.chat.id)
    update_last_interaction(message.chat.id)

@bot.callback_query_handler(func=lambda call: True)
def handle_welcome_response(call):
    update_last_interaction(call.message.chat.id)
    if call.data == "learn_about_academy":
        bot.edit_message_text("–ù–∞—à–∞ –ê–∫–∞–¥–µ–º–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç...", call.message.chat.id, call.message.message_id)
    elif call.data == "choose_training":
        choose_training(call.message.chat.id, call.message.message_id)
    elif call.data == "want_to_upgrade_qualification":
        second_question(call.message.chat.id, call.message.message_id)
    elif call.data == "want_to_be_rehabilitologist":
        second_question(call.message.chat.id, call.message.message_id)
    elif call.data == "want_to_participate_in_events":
        second_question(call.message.chat.id, call.message.message_id)
    elif call.data == ("offline"):
        third_question(call.message.chat.id, call.message.message_id)
    elif call.data == ("online"):
        third_question(call.message.chat.id, call.message.message_id)
    elif call.data == ("members"):
        members_menu(call.message.chat.id, call.message.message_id)
    elif call.data == ("aboutUs"):
        aboutUs_menu(call.message.chat.id, call.message.message_id)
    elif call.data == "get_news":
        bot.edit_message_text("–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...", call.message.chat.id, call.message.message_id)
    elif call.data == "follow_us":
        bot.edit_message_text("–í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞–º–∏ –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö...", call.message.chat.id, call.message.message_id)
    elif call.data == "enter_news":
        enter_news(call.message.chat.id, call.message.message_id)
    elif call.data == "main_menu":
        send_main_menu(call.message.chat.id, call.message.message_id)
    elif call.data == "use_current_contact":
        user_states[call.message.chat.id] = States.PAYMENT
        create_liqpay_invoice(call.message)
    elif call.data == "check_payment":
        check_payment_status(call.message)
    elif call.data == "payment":
        create_liqpay_invoice(call.message)
    elif call.data.startswith("member_"):
        handle_member_response(call)

@bot.message_handler(func=lambda message: message.text == "–ù–∞—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∏–Ω–∞" or message.text == "–ü–æ–ø–µ—Ä–µ–¥–Ω—è –Ω–æ–≤–∏–Ω–∞")
def handle_news_navigation(message):
    chat_id = message.chat.id
    if chat_id not in current_news_index:
        current_news_index[chat_id] = 0

    news_list = fetch_news()
    if message.text == "–ù–∞—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∏–Ω–∞":
        current_news_index[chat_id] += 1
        if current_news_index[chat_id] >= len(news_list):
            current_news_index[chat_id] = 0  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    elif message.text == "–ü–æ–ø–µ—Ä–µ–¥–Ω—è –Ω–æ–≤–∏–Ω–∞":
        current_news_index[chat_id] -= 1
        if current_news_index[chat_id] < 0:
            current_news_index[chat_id] = len(news_list) - 1  # –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
    message_id = last_message_id.get(chat_id)
    if message_id:
        news_menu(chat_id, message_id)
    else:
        news_menu(chat_id)  # –ï—Å–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == States.ENTERING_NEWS)
def handle_entering_news(message):
    if message.chat.id not in admins:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
        return

    news_text = message.text
    news_collection.insert_one({
        'text': news_text,
        'created_at': datetime.now()
    })
    bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    send_main_menu(message.chat.id)

    # –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users = users_collection.find()
    for user in users:
        bot.send_message(user['user_id'], f"–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å: {news_text}")

    update_last_interaction(message.chat.id)

##############################################################################################################

def first_question(chat_id):
    markups = InlineKeyboardMarkup()
    
    buttons = [
        InlineKeyboardButton("–•–æ—á—É —Å—Ç–∞—Ç–∏ —Ä–µ–∞–±—ñ–ª—ñ—Ç–æ–ª–æ–≥–æ–º", callback_data="want_to_be_rehabilitologist"),
        InlineKeyboardButton("–•–æ—á—É –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—é ", callback_data="want_to_upgrade_qualification"),
        InlineKeyboardButton("–•–æ—á—É –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—ñ –≤ –∑–∞—Ö–æ–¥–∞—Ö, —è–∫—ñ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—î –ê–∫–∞–¥–µ–º—ñ—è", callback_data="want_to_participate_in_events")
    ]
    for button in buttons:
        markups.add(button)
    bot.send_message(chat_id, "–©–æ —Å–∞–º–µ —Ç–µ–±–µ –ø–æ–≤'—è–∑—É—î –∑ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—î—é?", reply_markup=markups)
    
def second_question(chat_id, message_id=None):
    bot.send_message(chat_id, "–î—è–∫—É—é –∑–∞ —Ç–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –±—É–¥–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫—Ä—É—Ç—ñ —ñ–Ω—Å–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω—É —Ç–µ–º—É")
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("–û—Ñ–ª–∞–π–Ω", callback_data="offline"),
        InlineKeyboardButton("–û–Ω–ª–∞–π–Ω", callback_data="online"),
    )
    bot.send_message(chat_id, "–ù–∞–≤—á–∞–Ω–Ω—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –æ–Ω–ª–∞–π–Ω —ñ –æ—Ñ–ª–∞–π–Ω. –Ø–∫–æ–º—É —Ç–∏ –Ω–∞–¥–∞—î—à –ø–µ—Ä–µ–≤–∞–≥—É?üëá", reply_markup=markup)

def third_question(chat_id, message_id=None):
    
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    button_main_menu = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    button_contact = KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    markups.add(button_main_menu, button_contact)
    markups.row_width = 2
    bot.send_message(chat_id, "–ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –º–æ–∂—É—Ç—å –ø—ñ–¥–∫–∞–∑–∞—Ç–∏ —ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –≤—Å—ñ –ø–æ–¥—Ä–æ–±–∏—Ü—ñ –Ω–∞–≤—á–∞–Ω–Ω—è. –¢–∏ –º–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–º–µ—Ä —ñ –∑ —Ç–æ–±–æ—é –∑–≤'—è–∂—É—Ç—å—Å—è.")
    bot.send_message(chat_id, "–Ø–∫—â–æ —Ç–∏ –∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–∏–π –∞–≥–µ–Ω—Ç) —Ç–æ –º–æ–∂–µ—à —Å–∞–º –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ —É –≤–∫–ª–∞–¥—Ü—ñ –†–æ–∑–∫–ª–∞–¥ ", reply_markup=markups)


def send_main_menu(chat_id, message_id=None):
    markup = InlineKeyboardMarkup()
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    button_contact = KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    button_aboutUs = KeyboardButton("–ü—Ä–æ –Ω–∞—Å")
    button_contacts = KeyboardButton("–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
    button_members_menu = KeyboardButton("üí™–°–ø—ñ–∫–µ—Ä–∏")
    button_training_menu = KeyboardButton("–ù–∞–≤—á–∞–Ω–Ω—è")
    button_events = KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∑–∞—Ö–æ–¥–∏")
    button_schedule = KeyboardButton("–†–æ–∑–∫–ª–∞–¥ —Å–µ–º—ñ–Ω–∞—Ä—ñ–≤")
    button_news = KeyboardButton("–ù–æ–≤–∏–Ω–∏")
    markups.add(button_members_menu, button_training_menu, button_aboutUs, button_contacts, button_contact, button_events, button_schedule)
    markups.add(button_news)
    bot.send_message(chat_id, "–û–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá", reply_markup=markups)
    markup.row_width = 1
    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if chat_id in admins:
        buttons.append(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å", callback_data="enter_news"))

    markup.add(*buttons)
    
    if message_id:
        bot.edit_message_text("ü§ó–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ:", chat_id, message_id, reply_markup=markup)
    else:
        bot.send_message(chat_id, "ü§ó–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ:", reply_markup=markup)

    update_last_interaction(chat_id)
      
def our_contacts(chat_id, message_id=None):
    markup = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton("–Ü–Ω—Å—Ç–∞–≥—Ä–∞–ºüì∏", url="https://www.instagram.com/aurumfitnessclinic?igsh=cmcyZXVmZjJ3dTlx"),
        InlineKeyboardButton("–ù–∞—à —Å–∞–π—Çüåê", url="ya-reabilitolog.com.ua")
    ]
    markup.add(*buttons)
    
    bot.send_message(chat_id, """üìû –ù–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É: 
                     - +380443338596
                     - +380687123141
                     """)
    bot.send_message(chat_id, "üìß EMAIL: clinicaurum@gmail.com", reply_markup=markup)
    

def aboutUs_menu(chat_id, message_id=None):
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(chat_id, "¬´Aurum¬ª - —Ç—Ä–µ–Ω—ñ–Ω–≥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä –∑ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —ñ –∫–µ—Ä—ñ–≤–Ω–∏–∫—ñ–≤ —É —Å—Ñ–µ—Ä—ñ —Ñ—ñ—Ç–Ω–µ—Å—É.")
    bot.send_message(chat_id, "–î–æ–ø–æ–º–∞–≥–∞—î–º–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º —ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ —Ñ—ñ—Ç–Ω–µ—Å-—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –¥–ª—è –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ü—ñ—ó —ñ –∑–∞–ª—É—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –¥–æ —Å–ø–æ—Ä—Ç—É.")
    button_detail = KeyboardButton("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –Ω–∞—Å")
    button_founders = KeyboardButton("–ó–∞—Å–Ω–æ–≤–Ω–∏–∫–∏")
    button_learning = KeyboardButton("–ü—Ä–æ –Ω–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è")
    button_why = KeyboardButton("–ß–æ–º—É –º–∏?") 
    button_main_menu = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    markups.add(button_detail, button_founders, button_learning, button_why, button_main_menu)
    bot.send_message(chat_id, "–©–æ —â–µ —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏?üëá", reply_markup=markups)
    
def detail_aboutUs(chat_id, message_id=None):
    bot.send_message(chat_id, """
–ú–∏, –ê–∫–∞–¥–µ–º—ñ—è —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó Aurum Fitness Clinic, —É–∂–µ –≤–ø—Ä–æ–¥–æ–≤–∂ 7 —Ä–æ–∫—ñ–≤ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –ª—é–¥—è–º —Å—Ç–∞–≤–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤—ñ—à–∏–º–∏ —Ç–∞ —Å–∏–ª—å–Ω—ñ—à–∏–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞ üè• - –∞ —Ü–µ —Å–∫–ª–∞–¥–∞–Ω–Ω—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω—É —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó, —â–æ –æ—Ö–æ–ø–ª—é—î:

- üë®‚Äç‚öïÔ∏è –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å
- üí™ –∑–∞–Ω—è—Ç—Ç—è –∑ —Ñ—ñ–∑–∏—á–Ω–æ—ó —Ç–µ—Ä–∞–ø—ñ—ó
- üîó –ø—ñ–¥–≤—ñ—Å–Ω—ñ —Å–∏—Å—Ç–µ–º–∏
- üõ† —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ö–∞–Ω–æ—Ç–µ—Ä–∞–ø—ñ—ó
- ‚ö° —Ñ—ñ–∑—ñ–æ—Ç–µ—Ä–∞–ø—ñ—é

–í–µ–ª–∏–∫–∏–π –¥–æ—Å–≤—ñ–¥ –º–∞—î–º–æ –¥–æ–ø–æ–º–∞–≥–∞—é—á–∏ –≤—ñ–π—Å—å–∫–æ–≤–∏–º. –ù–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ —Ç–∞ –¥–æ—Å–≤—ñ–¥—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤, —â–æ —Å—è–≥–∞—î –ø–æ–Ω–∞–¥ 15 —Ä–æ–∫—ñ–≤, –º–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∫—É—Ä—Å, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ—é—á–∏–º —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞–º –∑ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó, —Ä–µ–∞–±—ñ–ª—ñ—Ç–æ–ª–æ–≥—É-–ø–æ—á–∞—Ç–∫—ñ–≤—Ü—é, –ª—ñ–∫–∞—Ä—é –∞–±–æ —Ñ–∞—Ö—ñ–≤—Ü—é, —è–∫–∏–π —Ö–æ—á–µ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—é, –ø—Ä–æ–π—Ç–∏ –∑ –Ω–∞–º–∏ –≤–µ—Å—å —à–ª—è—Ö –≤—ñ–¥ –∑—É—Å—Ç—Ä—ñ—á—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ –π–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è üèÜ.
""")
    bot.send_message(chat_id, "–©–æ —â–µ —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏?üëá")

def about_learning(chat_id, message_id=None):
    bot.send_message(chat_id, """
–ó —á–æ–≥–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –Ω–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è? üìö

–ó–∞–≥–∞–ª—å–Ω–∏–π –∫—É—Ä—Å —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 3-—Ö –º–æ–¥—É–ª—ñ–≤. –ö–æ–∂–µ–Ω –º–æ–¥—É–ª—å –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –µ—Ç–∞–ø—ñ–≤. 

üîß –ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ - –≤—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –Ω–∞ –Ω–æ–≤—ñ—Ç–Ω—å–æ–º—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ.

üìë –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ - –¥–æ—Å—Ç—É–ø –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —Ç–∞ —á–∞—Ç –ë–æ—Ç—É –∑–∞ –Ω–∞–ø—Ä—è–º–æ–º ¬´–ê–∫–∞–¥–µ–º—ñ—è –†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó¬ª.

üé• –í—ñ–¥–µ–æ-—Å—É–ø—Ä–æ–≤—ñ–¥ - –≤—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –±—É–¥—É—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤—ñ–¥–µ–æ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó.

üìù –Ü—Å–ø–∏—Ç –±—É–¥–µ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É.
""")

    bot.send_message(chat_id, "–©–æ —â–µ —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏?üëá")

def about_founders(chat_id, message_id=None):
    member_info = get_member_info('samsyi')
    response_text1 = """
**–°–ê–ú–°–Ü–ô –†–û–ú–ê–ù** üéì

‚óè –ß–ª–µ–Ω –ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –ê—Å–æ—Ü—ñ–∞—Ü—ñ—ó –§—ñ–∑–∏—á–Ω–æ—ó —Ç–∞ –ú–µ–¥–∏—á–Ω–æ—ó –†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó;
‚óè –ö–µ—Ä—ñ–≤–Ω–∏–∫ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—ó –≥—Ä—É–ø–∏ –∑ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–æ–≥–æ —Ç–∞ –≤–∏—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –≤ —Å—Ñ–µ—Ä—ñ –æ—Ö–æ—Ä–æ–Ω–∏ –∑–¥–æ—Ä–æ–≤‚Äô—è.

–Ø –ø–æ—á–∏–Ω–∞–≤ –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –∫–∞—Ä‚Äô—î—Ä–∏, –∑–∞–π–º–∞–≤—Å—è –ª–µ–≥–∫–æ—é –∞—Ç–ª–µ—Ç–∏–∫–æ—é, –º–µ—Ç–∞–Ω–Ω—è–º –º–æ–ª–æ—Ç–∞, —Å–ø–∏—Å–∞. üèÖ –ë–∞—á–∏–≤ —ñ –ø–µ—Ä–µ–º–æ–≥–∏, —ñ –ø—Ä–æ–≥—Ä–∞—à—ñ. –ó —á–∞—Å–æ–º —á–µ—Ä–µ–∑ —Ç—Ä–∞–≤–º–∏ –ø–æ—Å—Ç–∞–ª–æ –ø–∏—Ç–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —à–ª—è—Ö—É.

–Ø –≤–∂–µ –Ω–∞–≤—á–∞–≤—Å—è –≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫—É–ª—å—Ç—É—Ä–∏ –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É. –ü–æ—á–∏–Ω–∞–≤ –∑ –æ–ª—ñ–º–ø—ñ–π—Å—å–∫–æ–≥–æ —Å–ø–æ—Ä—Ç—É, –ø–æ—Ç—ñ–º ‚Äì —Ä–µ–∫—Ä–µ–∞—Ü—ñ—è —ñ —Ñ—ñ—Ç–Ω–µ—Å, —ñ –∑–∞–∫—ñ–Ω—á–∏–≤ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω–∏–º –Ω–∞–ø—Ä—è–º–∫–æ–º. üèãÔ∏è‚Äç‚ôÇÔ∏è

–ó 18 —Ä–æ–∫—ñ–≤ –ø—Ä–∞—Ü—é–≤–∞–≤ –∑ –ø–∞—Ü—ñ—î–Ω—Ç–∞–º–∏ –Ω–µ–≤—Ä–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É –≤ –¥–æ–º–∞—à–Ω—ñ—Ö —É–º–æ–≤–∞—Ö. üè†
    """
    response_text2 = """
–í –•–•–•–• —Ä–æ—Ü—ñ –º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤ –º–µ—Ä–µ–∂—É –∫–ª—É–±—ñ–≤ ¬´–°–ø–æ—Ä—Ç–õ–µ–Ω–¥¬ª, –¥–µ —è —Å—Ñ–æ—Ä–º—É–≤–∞–≤ —à–∫–æ–ª—É —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É. –°—Ç–∞–≤ –æ—Å–Ω–æ–≤–Ω–∏–º –º–µ—Ç–æ–¥–∏—Å—Ç–æ–º –º–µ—Ä–µ–∂—ñ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω—Ü–µ–º –≤ —Ç—Ä—å–æ—Ö –∫–ª—É–±–∞—Ö. –ó–∞–ø—Ä–æ–≤–∞–¥–∏–≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏, –∑–∞–≤–¥—è–∫–∏ —á–æ–º—É –ø—Ä–æ–¥–∞–∂ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–∞–Ω—è—Ç—å –∑–±—ñ–ª—å—à–∏–≤—Å—è –Ω–∞ 60%. üìà

–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –ø–µ—Ä–µ–π—à–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —Ä–æ–±–æ—Ç—ñ –∑ —Ñ—ñ—Ç–Ω–µ—Å-–Ω–∞–ø—Ä—è–º–∫–∞–º–∏ –≤ –∫–ª—É–±—ñ EnerGym, –¥–µ –∑ 0 –Ω–∞–ª–∞–≥–æ–¥–∏–≤ —Ä–æ–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–∏. üí™

–í 2015 —Ä–æ—Ü—ñ —è –ø–æ—ó—Ö–∞–≤ –¥–æ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—ó, –¥–µ –Ω–∞–≤—á–∞–≤—Å—è –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É —Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω–∏—Ö –æ–∑–¥–æ—Ä–æ–≤—á–∏—Ö –∫–æ–º–ø–ª–µ–∫—Å—ñ–≤. üá¨üáß
    """
    
    response_text3 = """
–ü—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏–≤ –ø–µ—Ä—à—É —ñ —î–¥–∏–Ω—É —Ñ—ñ—Ç–Ω–µ—Å-–∫–ª—ñ–Ω—ñ–∫—É Aurum, –¥–µ –∑—ñ–±—Ä–∞–ª–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —Ç–∞ –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —è–∫–∏–º –Ω–µ–º–∞—î –∞–Ω–∞–ª–æ–≥—ñ–≤ –≤ –£–∫—Ä–∞—ó–Ω—ñ. üè•

–ó–∞—Ä–∞–∑ —è –≤–∏–≤–æ–¥–∂—É –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å –Ω–∞ –±—ñ–ª—å—à –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ç–∞ –∑–∞–π–º–∞—é—Å—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—î—é —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö —Ä–∞–∑–æ–º –∑ –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ê—Å–æ—Ü—ñ–∞—Ü—ñ—î—é –§—ñ–∑–∏—á–Ω–æ—ó —Ç–∞ –ú–µ–¥–∏—á–Ω–æ—ó –†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó. ü™ñ

–ú–∞—é—á–∏ —Ü—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å–≤—ñ–¥, –∑—ñ —Å–≤–æ—î—é –∫–æ–º–∞–Ω–¥–æ—é –º–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –ö—É—Ä—Å ‚Äú—è –§—ñ–∑—ñ–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç‚Äù, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É –Ω–∞–±—É—Ç–∏ –∑–Ω–∞–Ω—å —Ç–∞ –¥–æ–≤–µ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–µ—Ä—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–æ –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è. üìö
    """
    member_info = get_member_info("samsyi")
    if member_info:
        if 'imgUrl' in member_info:
            bot.send_photo(chat_id, member_info['imgUrl2'], caption=response_text1)  
            bot.send_message(chat_id, response_text2)
            bot.send_message(chat_id, response_text3)
            bot.send_message(chat_id, "–©–æ —â–µ —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏?üëá")
        else:
            bot.send_message(chat_id, response_text1)
    else:
        bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def why_we(chat_id, message_id=None):
    bot.send_message(chat_id, """
–ù–∞—à–∞ –∞–≤—Ç–æ—Ä—Å—å–∫–∞ –º–µ—Ç–æ–¥–∏–∫–∞ –∑–∞—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –¥–æ–∫–∞–∑–æ–≤–∏—Ö –º–µ—Ç–æ–¥–∏–∫–∞—Ö, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö —Ç–∞ –æ—Å–æ–±–∏—Å—Ç—ñ–π –ø—Ä–∞–∫—Ç–∏—Ü—ñ –¥—ñ—î–≤–∏—Ö –∫–µ–π—Å—ñ–≤ –Ω–∞—à–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É! üåçüìä

–í–∏ –∑–º–æ–∂–µ—Ç–µ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤–æ—é —Ü—ñ–Ω–Ω—ñ—Å—Ç—å —è–∫ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞, –±—É—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–º –¥–ª—è —Å–≤–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞, —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ —Å–ø–µ–∫—Ç—Ä –ø–æ—Å–ª—É–≥ –ø—Ä–æ–π—à–æ–≤—à–∏ –Ω–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è. üìàüí™

–ó–∞–≤–¥—è–∫–∏ –∑–Ω–∞–Ω–Ω—è–º, –æ—Ç—Ä–∏–º–∞–Ω–∏–º —É –Ω–∞—Å - –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–æ –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è. üè•üîÑ

–í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤–æ—ó—Ö –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –≥–æ—Å—Ç–µ–π. üë•üîù

–°—Ç—Ä—É–∫—Ç—É—Ä—É—î—Ç–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –¥—ñ–π –∑ –ø–∞—Ü—ñ—î–Ω—Ç–æ–º, —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó –≤ –∫–æ–º–∞–Ω–¥—ñ. üóÇÔ∏èü§ù

–û–≤–æ–ª–æ–¥—ñ—î—Ç–µ –Ω–æ–≤–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤–∏–π—Ç–∏ –≤–∞–º –Ω–∞ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å —É —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó. üöÄüìö """)
    bot.send_message(chat_id, "–©–æ —â–µ —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏?üëá")
    
    
def learn_plan_menu(chat_id, message_id=None):
    bot.send_message(chat_id, "–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å ¬´–Ø —Ñ—ñ–∑–∏—á–Ω–∏–π —Ç–µ—Ä–∞–ø–µ–≤—Ç¬ª —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ç—Ä—å–æ—Ö –º–æ–¥—É–ª—ñ–≤")
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    first_module = KeyboardButton("–ú–æ–¥—É–ª—å 1")
    second_module = KeyboardButton("–ú–æ–¥—É–ª—å 2")
    third_module = KeyboardButton("–ú–æ–¥—É–ª—å 3")
    all_course = KeyboardButton("–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å") 
    main_menu = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    markups.add(first_module, second_module, third_module, all_course)
    markups.add(main_menu)
    bot.send_message(chat_id, "–î—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –º–æ–¥—É–ª—å –º–æ–∂–Ω–∞ –Ω–∏–∂—á–µüëá", reply_markup=markups)

def first_module(chat_id, message_id=None):
    bot.send_message(chat_id, """–ú–æ–¥—É–ª—å 1. ü©∫ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è, –∫–æ—Ç—Ä—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.
1. ü¶¥ –í–µ—Ä—Ç–µ–±—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞. –û—Ä—Ç–æ–ø–µ–¥–∏—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ—Ä—Ö–Ω—ñ—Ö —Ç–∞ –Ω–∏–∂–Ω—ñ—Ö –∫—ñ–Ω—Ü—ñ–≤–æ–∫
2. üíÜ‚Äç‚ôÇÔ∏è –ú—ñ–æ—Ñ–∞—Å—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–µ–ª—ñ–∑ (–ú–§–†) 
3. üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–∏–∫–ª–∞–¥–Ω–∞ –∫—ñ–Ω–µ–∑—ñ–æ–ª–æ–≥—ñ—è
4. üßò‚Äç‚ôÇÔ∏è –û—Å—Ç–µ–æ–ø–∞—Ç–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ö–æ—Ä–∏–≥—É—é—á–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞.""")
    create_liqpay_invoice(chat_id, 'module_1', 50)

def second_module(chat_id, message_id=None):
    bot.send_message(chat_id, """–ú–æ–¥—É–ª—å 2. –§—ñ–∑–∏—á–Ω—ñ –Ω–µ –∞–ø–∞—Ä–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –ª—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó. –ü—Ä–æ—Ç–æ–∫–æ–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, –µ—Ç–∞–ø–∏ —Ç–∞ –º–µ—Ç–æ–¥–∏–∫–∏.

1. Levitas, Redcord —Å–∏—Å—Ç–µ–º–∞ –ø—ñ–¥–≤—ñ—Å–Ω–∏—Ö —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ–≤ üèãÔ∏è‚Äç‚ôÇÔ∏è‚ú®
2. –†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω—ñ –Ω–∞–ø—Ä—è–º–∫–∏ –º–∞—Å–∞–∂—É, —Ç–µ–π–ø—É–≤–∞–Ω–Ω—è üíÜ‚Äç‚ôÇÔ∏èü©π
3. –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è –º'—è–∫–∏—Ö —Ç–∫–∞–Ω–∏–Ω üîßüí™
4. –ú–µ—Ç–æ–¥ Dry Needling (‚Äú—Å—É—Ö–æ—ó‚Äù –≥–æ–ª–∫–∏) ü™°üîç""")
    create_liqpay_invoice(chat_id, 'module_2', 50)

def third_module(chat_id, message_id=None):
    bot.send_message(chat_id, """–ú–æ–¥—É–ª—å 3. –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è, –¥—ñ—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ —Ç–∞ —Å—É—á–∞—Å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.

1. –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è. –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑–Ω–∞–Ω—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ —Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ –∫–æ–º–ø–æ–Ω—É–≤–∞–Ω–Ω—ñ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ (–æ—Ä—Ç–æ–ø–µ–¥—ñ—è, –≤–µ—Ä—Ç–µ–±—Ä–æ–ª–æ–≥—ñ—è) üõ†üìö
2. –ê–ø–∞—Ä–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏. –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ —Ä–æ–±–æ—Ç–∏ –Ω–∞ —Ñ—ñ–∑—ñ–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–Ω–æ–º—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ üè•üí° (–ú–∞–≥–Ω—ñ—Ç–æ—Ç–µ—Ä–∞–ø—ñ—è, –ª–∞–∑–µ—Ä–æ—Ç–µ—Ä–∞–ø—ñ—è; –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∏–º—É–ª—è—Ü—ñ—è; –ø—Ä–µ—Å–æ—Ç–µ—Ä–∞–ø—ñ—è, —É–¥–∞—Ä–Ω–æ-—Ö–≤–∏–ª—å–æ–≤–∞ —Ç–µ—Ä–∞–ø—ñ—è, –ª–æ–∫–∞–ª—å–Ω–∞ –¥—ñ–∞—Ç–µ—Ä–º—ñ—è) ‚ö°Ô∏èüî¨
3. –ú–æ–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å –¥–ª—è –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø—ñ–¥–≥–æ—Å—Ç—Ä–∏–π –ø–µ—Ä—ñ–æ–¥ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó) ü§∏‚Äç‚ôÇÔ∏èüîÑ
4. –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ üßë‚Äç‚öïÔ∏èüìù""")
    create_liqpay_invoice(chat_id, 'module_3', 50)

def all_course(chat_id, message_id=None):
    bot.send_message(chat_id, "–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å, —É —è–∫–∏–π –≤—Ö–æ–¥—è—Ç—å 3 –º–æ–¥—É–ª—ñ")
    create_liqpay_invoice(chat_id, 'all_course', 100)

def members_menu(chat_id, message_id=None):
    user_states[chat_id] = States.CHOOSING_MEMBERS
    markup = InlineKeyboardMarkup()
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    button_main_menu = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    button_members_menu = KeyboardButton("üí™–°–ø—ñ–∫–µ—Ä–∏")
    markups.add(button_main_menu, button_members_menu)
    
    markup.row_width = 1
    
    markup.add(
        InlineKeyboardButton("–°–∞–º—Å—ñ–π –†–æ–º–∞–Ω", callback_data="member_samsyi_roman"),
        InlineKeyboardButton("–ü–æ–¥–æ–ª—å—Å–∫–∏ –í–∞—Å–∏–ª—å", callback_data="member_podolski_vasyl"),
        InlineKeyboardButton("–õ–∏—Ç–≤–∏–Ω—á—É–∫ –ú–∏—Ö–∞–π–ª–æ", callback_data="member_litvinchuk_myhail"),
        InlineKeyboardButton("–ö–æ–∂–µ–≤–Ω–∏–∫–æ–≤ –î–∞–Ω–∏–ª", callback_data="member_kozh_danyl"),
        
    )
    bot.send_message(chat_id, "–•—Ç–æ –∑ –º–µ—Ç–æ–¥–∏—Å—Ç—ñ–≤ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá", reply_markup=markup)
    #bot.edit_message_text("üëá–•—Ç–æ –∑ –º–µ—Ç–æ–¥–∏—Å—Ç—ñ–≤ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å", chat_id, message_id, reply_markup=markup)
    update_last_interaction(chat_id)

def get_member_info(id_name):
    member_info = members_collection.find_one({'id_name': id_name})
    if member_info:
        return member_info
    return None


def handle_member_response(call):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_main_menu = KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é")
    markup.add(button_main_menu)
    member_id_name = call.data.split("_")[1]
    member_info = get_member_info(member_id_name)
    if member_info:
        response_text = f"{member_info['name']}\n"
        if 'imgUrl' in member_info:
            bot.send_photo(call.message.chat.id, member_info['imgUrl'], caption=response_text)
            bot.send_message(call.message.chat.id, member_info['about'], reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, response_text)
    else:
        bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def actual_events(chat_id, message_id=None):
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    button_date = KeyboardButton("–ö–æ–ª–∏?")
    button_where = KeyboardButton("–î–µ?")
    button_cost = KeyboardButton("–í–∞—Ä—Ç—ñ—Å—Ç—å")
    button_plan = KeyboardButton("–ü–ª–∞–Ω –∫–æ–Ω–≥—Ä–µ—Å—É")
    button_main_menu = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    markups.add(button_date, button_where, button_cost, button_plan, button_main_menu)
    bot.send_message(chat_id, "3-–¥–µ–Ω–Ω–∏–π –Ω–∞–π–º–∞—Å—à—Ç–∞–±–Ω—ñ—à–∏–π –∫–æ–Ω–≥—Ä–µ—Å –∑ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó", reply_markup=markups)
    bot.send_message(chat_id, "–û–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá")



###########################################################################
def get_seminars_element(field):
    element = seminars_collection.find_one()
    if field in element:
        return element[field]
    return ""

def split_message(message, max_length=4096):
    # Telegram has a maximum message length of 4096 characters
    return [message[i:i+max_length] for i in range(0, len(message), max_length)]

def seminars_data(chat_id, function, arg, message_id=None):
    content = function(arg)
    messages = split_message(content)
    for msg in messages:
        bot.send_message(chat_id, msg)
 ########################################################################### 
    
def select_month(month):
    get_month = monthes_collection.find_one({
        'numberMonth': month,
    })
    return get_month['month']

def select_list(month):
    get_schelude = monthes_collection.find_one({
        'numberMonth': month,
    })
    return get_schelude['schelude']

def schelude_seminars(chat_id, message_id=None):
    markups = ReplyKeyboardMarkup(resize_keyboard=True)
    
    markups.add(  
        KeyboardButton(select_month('month_1')),
        KeyboardButton(select_month('month_2')),
        KeyboardButton(select_month('month_3')),
        KeyboardButton(select_month('month_4')),
        KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    )
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—åüëá", reply_markup=markups)

def schelude_list(chat_id, month):
    bot.send_message(chat_id, select_list(month))
       
def choose_training(chat_id, message_id=None):
    user_states[chat_id] = States.CHOOSING_DIRECTION
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", callback_data="direction_physiotherapist"),
        InlineKeyboardButton("–†–µ–∞–±–∏–ª–∏—Ç–æ–ª–æ–≥", callback_data="direction_rehabilitologist"),
        InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞", callback_data="direction_sports_medicine"),
    )
    bot.send_message(chat_id, "–û–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá", reply_markup=markup)

def fetch_news():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ MongoDB
    news_cursor = news_collection.find({})
    news_list = [news['content'] for news in news_cursor]
    return news_list

def news_menu(chat_id, message_id=None):
    global current_news_index, last_message_id

    if chat_id not in current_news_index:
        current_news_index[chat_id] = 0

    news_list = fetch_news()
    if not news_list:
        bot.send_message(chat_id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.')
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    news = news_list[current_news_index[chat_id]]
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ü–æ–ø–µ—Ä–µ–¥–Ω—è –Ω–æ–≤–∏–Ω–∞"), types.KeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∏–Ω–∞"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    try:
        if message_id:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=news, reply_markup=keyboard)
        else:
            sent_message = bot.send_message(chat_id=chat_id, text=news, reply_markup=keyboard)
            last_message_id[chat_id] = sent_message.message_id
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = bot.send_message(chat_id=chat_id, text=news, reply_markup=keyboard)
        last_message_id[chat_id] = sent_message.message_id

def send_daily_news():
    global user_last_interaction

    now = datetime.now()
    news_list = fetch_news()

    for chat_id, last_interaction in user_last_interaction.items():
        if now - last_interaction >= timedelta(days=1):
            if news_list:
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
                news = news_list[0]
                bot.send_message(chat_id, news)
                # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                user_last_interaction[chat_id] = now

def create_liqpay_invoice(chat_id, module_name, cost):
    amount = cost  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    currency = 'UAH'
    description = f'–û–ø–ª–∞—Ç–∞ –∑–∞ {module_name}'
    order_id = f'order_{chat_id}_{int(time.time())}'
    user_order_ids[chat_id] = order_id

    liqpay_data = {
        'public_key': LIQPAY_PUBLIC_KEY,
        'version': '3',
        'action': 'pay',
        'amount': amount,
        'currency': currency,
        'description': description,
        'order_id': order_id,
        'sandbox': 1  # –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ 0 –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    }
    liqpay_data_str = base64.b64encode(json.dumps(liqpay_data).encode('utf-8')).decode('utf-8')
    liqpay_signature = base64.b64encode(hashlib.sha1(f'{LIQPAY_PRIVATE_KEY}{liqpay_data_str}{LIQPAY_PRIVATE_KEY}'.encode('utf-8')).digest()).decode('utf-8')

    payment_url = f'https://www.liqpay.ua/api/3/checkout?data={liqpay_data_str}&signature={liqpay_signature}'
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–°–ø–ª–∞—Ç–∏—Ç–∏", url=payment_url),
        types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data="check_payment"),
    )

    user_directions[chat_id] = module_name
    bot.send_message(chat_id, f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –æ–ø–ª–∞—Ç–∏. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ó—ó –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ (—á–µ—Ä–µ–∑ 10-15 —Å–µ–∫—É–Ω–¥)", reply_markup=markup)



def check_payment_status(message):
    order_id = user_order_ids.get(message.chat.id)
    if not order_id:
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    url = 'https://www.liqpay.ua/api/request'
    liqpay_data = {
        'public_key': LIQPAY_PUBLIC_KEY,
        'version': '3',
        'action': 'status',
        'order_id': order_id
    }
    liqpay_data_str = base64.b64encode(json.dumps(liqpay_data).encode('utf-8')).decode('utf-8')
    liqpay_signature = base64.b64encode(hashlib.sha1(f'{LIQPAY_PRIVATE_KEY}{liqpay_data_str}{LIQPAY_PRIVATE_KEY}'.encode('utf-8')).digest()).decode('utf-8')

    response = requests.post(url, data={'data': liqpay_data_str, 'signature': liqpay_signature})
    response_data = response.json()

    if response_data['status'] == 'sandbox':
        handle_successful_payment(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def handle_successful_payment(chat_id):
    module_name = user_directions.get(chat_id, "–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥")
    bot.send_message(chat_id, f"–î—è–∫—É—é –∑–∞ –æ–ø–ª–∞—Ç—É! –ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –≤ MongoDB
    users_collection.update_one(
        {'user_id': chat_id},
        {'$set': {
            'state': States.WELCOME,
            f'payment_status_{module_name}': 'Paid'
        }},
        upsert=True
    )

def monitor_and_send_urgent_news():
    last_checked = datetime.now()
    while True:
        urgent_news = news_collection.find({'isUrgent': True, 'sent': {'$ne': True}})
        for news in urgent_news:
            send_urgent_news_to_users(news)
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
            news_collection.update_one({'_id': news['_id']}, {'$set': {'sent': True}})
        last_checked = datetime.now()
        time.sleep(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_urgent_news_to_users(news):
    users = users_collection.find({})
    for user in users:
        if 'imageUrl' in news:
            bot.send_photo(user['user_id'], news['imageUrl'], caption=f"{news['title']}\n{news['content']}")
        else:
            bot.send_message(user['user_id'], f"{news['title']}\n{news['content']}/n{news['imageUrl']}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def send_non_urgent_news():
    today = datetime.combine(datetime.now().date(), datetime_time()) # Get the current date in UTC
    non_urgent_news = news_collection.find({
        'isUrgent': False,
        'sendDate': {'$lte': today},
        'sent': {'$ne': True}
    })
    for news in non_urgent_news:
        send_non_urgent_news_to_users(news)
        # Update the news as sent
        news_collection.update_one({'_id': news['_id']}, {'$set': {'sent': True}})

def send_non_urgent_news_to_users(news):
    users = users_collection.find({})
    for user in users:
        if 'imageUrl' in news:
            bot.send_photo(user['user_id'], news['imageUrl'], caption=f"–ù–û–í–û–°–¢–¨: {news['title']}\n{news['content']}")
        else:
            bot.send_message(user['user_id'], f"–ù–û–í–û–°–¢–¨: {news['title']}\n{news['content']}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
schedule.every().day.at("18:20").do(send_non_urgent_news)

# –í–≤–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π
def enter_news(chat_id, message_id):
    if chat_id not in admins:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
        return

    user_states[chat_id] = States.ENTERING_NEWS
    bot.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:", chat_id, message_id)
    update_last_interaction(chat_id)



def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

def send_daily_news():
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    now = datetime.now()
    yesterday = now - timedelta(days=1)
    recent_news = news_collection.find({'created_at': {'$gte': yesterday}})
    
    for news in recent_news:
        news_text = news['text']
        users = users_collection.find()
        for user in users:
            bot.send_message(user['user_id'], f"–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å: {news_text}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

urgent_news_thread = threading.Thread(target=monitor_and_send_urgent_news)
urgent_news_thread.daemon = True
urgent_news_thread.start()

scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_news, 'interval', hours=24)
scheduler.start()

reminder_thread = threading.Thread(target=send_reminders)
reminder_thread.daemon = True
reminder_thread.start()

bot.polling(none_stop=True)
